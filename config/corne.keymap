/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        tildaswitch {
            bindings = <&kp TILDE>;
            key-positions = <0 1>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB           &kp Q  &kp W  &kp E  &kp R             &kp T        &kp Y          &kp U       &kp I      &kp O    &kp P     &kp ESCAPE
&kp LEFT_SHIFT    &kp A  &kp S  &kp D  &kp F             &kp G        &kp H          &kp J       &kp K      &kp L    &kp SEMI  &kp SQT
&kp LEFT_CONTROL  &kp Z  &kp X  &kp C  &kp V             &kp B        &kp N          &kp M       &kp COMMA  &kp DOT  &kp FSLH  &kp RIGHT_ALT
                                &mo 1  &kp LEFT_COMMAND  &kp SPACE    &kp BACKSPACE  &kp RETURN  &mo 2
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE        &kp N1            &kp N2                  &kp N3                &kp N4             &kp N5                      &kp N6         &kp N7           &kp N8       &kp N9     &kp N0  &kp BSPC
&trans            &kp LC(LA(LEFT))  &kp LC(LA(DOWN_ARROW))  &kp LC(LA(UP_ARROW))  &kp LC(LA(RIGHT))  &kp LC(LA(ENTER))           &kp LEFT       &kp DOWN         &kp UP       &kp RIGHT  &trans  &trans
&kp LEFT_CONTROL  &trans            &trans                  &trans                &trans             &kp LG(LS(LC(NUMBER_4)))    &trans         &kp LC(LS(TAB))  &kp LC(TAB)  &trans     &trans  &trans
                                                            &trans                &trans             &kp SPACE                   &kp BACKSPACE  &trans           &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE        &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET         &kp AMPS           &kp ASTRK  &kp LPAR        &kp RPAR  &kp DELETE
&kp LEFT_SHIFT    &trans    &trans  &trans    &trans    &trans       &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp EQUAL  &kp MINUS       &kp BSLH  &kp GRAVE
&kp LEFT_CONTROL  &trans    &trans  &trans    &trans    &trans       &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp PLUS   &kp UNDERSCORE  &kp PIPE  &kp TILDE
                                    &trans    &trans    &kp SPACE    &kp BACKSPACE     &trans             &trans
            >;
        };
    };
};
